import matplotlib.pyplot as plt      #import 2D plotting library
import matplotlib as m
from matplotlib import colors, ticker, cm, mlab
from mpl_toolkits.mplot3d import axes3d
from matplotlib.colors import LogNorm
import matplotlib.gridspec as gridspec
import numpy as np                   #import scientific computing library
import pylab as pl
import os                            #import operating system library
from netCDF4 import Dataset          #import dataset library from netCDF pkg
import glob
import sys
from pylab import *
import matplotlib.font_manager as font_manager
import warnings
warnings.filterwarnings("ignore")
np.set_printoptions(threshold=np.inf)


infile = 'OUTPUT.NC'
fh = Dataset(infile,mode = 'r')

time = (fh.variables['TIMES'][:])
qi = (fh.variables['QICE'][:])
qc = (fh.variables['QCLOUD'][:])
qv = (fh.variables['QVAPOR'][:])
qs = (fh.variables['QSNOW'][:])
qr = (fh.variables['QRAIN'][:])
ni = (fh.variables['QNICE'][:])
ns = (fh.variables['QNSNOW'][:])
nr = (fh.variables['QNRAIN'][:])
nc = (fh.variables['QNCLOUD'][:])
aice = (fh.variables['AICE'][:])
cice = (fh.variables['CICE'][:])
asno = (fh.variables['ASNOW'][:])
csno = (fh.variables['CSNOW'][:])
th = (fh.variables['THETA'][:])
p = (fh.variables['PRESS'][:])
relh = (fh.variables['RELH'][:])
phi = (fh.variables['PHI'][:])
rhoice =  (fh.variables['RHOICE'][:])
phis = (fh.variables['PHIS'][:])
rhos =  (fh.variables['RHOS'][:])
nuc = (fh.variables['ICENUC'][:])
dep = (fh.variables['ICEDEP'][:])
sub = (fh.variables['ICESUB'][:])
agg = (fh.variables['QAGG'][:])
temp = th*(p/1.e5)**(287.05/1005)
numt = time.shape[0]
ai = np.zeros((numt))
ci = np.zeros((numt))
wh = np.where((aice > 0.0) & (cice > 0.) & (ni > 0.0))
ai[wh] = (aice[wh]*aice[wh]/(cice[wh]*ni[wh]*4.))**(1./3.)
ci[wh] = (cice[wh]*cice[wh]/(aice[wh]*ni[wh]*4.))**(1./3.)

asn = np.zeros((numt))
csn = np.zeros((numt))
wh = np.where((asno > 0.0) & (csno > 0.) & (ns > 0.0))
asn[wh] = (asno[wh]*asno[wh]/(csno[wh]*ns[wh]*4.))**(1./3.)
csn[wh] = (csno[wh]*csno[wh]/(asno[wh]*ns[wh]*4.))**(1./3.)

gs = gridspec.GridSpec(3,3,wspace=0.7)
axis_font = {'size':'9'}
labelfont = 8
TITLE = str(int(temp[1]-273.15))+' $^o$C'

ax1 = plt.subplot(gs[0])
P1 = ax1.plot(time,relh,color='orange',linewidth=1)
#plt.xlabel('Time (s)', **axis_font)
plt.ylabel('RH', **axis_font)
ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)

#ax1 = plt.subplot(gs[0])
ax2 = ax1.twinx()
P1 = ax2.plot(time,temp-273.15,color='red',linewidth=1)
#plt.xlabel('Time (s)', **axis_font)
plt.ylabel('Temp (C)', **axis_font)
ax2.tick_params(axis='x', labelsize=labelfont)
ax2.tick_params(axis='y', labelsize=labelfont)
#ax2.yaxis.tick_right()
#ax2.yaxis.set_label_position("right")

ax1 = plt.subplot(gs[1])
P1 = ax1.plot(time,phi,color='blue',linewidth=1)
P2 = ax1.plot(time,phis,color='cyan',linewidth=1)
#plt.xlabel('Time (s)', **axis_font)
plt.ylabel('Aspect Ratio', **axis_font)
plt.legend(['i','s'])
ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)
#plt.title(TITLE)

ax1 = plt.subplot(gs[2])
P1 = ax1.plot(time,qv*1000.,color='blue',linewidth=1)
#plt.xlabel('Time (s)', **axis_font)
plt.ylabel('q$_{vapor}$ g kg$^{-1}$', **axis_font)
ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)
if any(qv) > 0: ax1.set_yscale('log')

ax1 = plt.subplot(gs[3])
P1 = ax1.plot(time,qi*1000.,color='blue',linewidth=1)
P2 = ax1.plot(time,qs*1000.,color='cyan',linewidth=1)
#plt.xlabel('Time (s)', **axis_font)
plt.ylabel('q g kg$^{-1}$', **axis_font)
plt.legend(['i','s'])
ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
if any(qi) > 0: ax1.set_yscale('log')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)

ax1 = plt.subplot(gs[4])
P1 = ax1.plot(time,qc*1000.,color='black',linewidth=1)
P2 = ax1.plot(time,qr*1000.,color='green',linewidth=1)
#plt.xlabel('Time (s)', **axis_font)
plt.ylabel('q g kg$^{-1}$', **axis_font)
plt.legend(['c','r'])
ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
if any(qc) > 0: ax1.set_yscale('log')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)

#ax1 = plt.subplot(gs[6])
#P1 = ax1.plot(time,qs*1000.)
#plt.xlabel('Time (s)', **axis_font)
#plt.ylabel('q$_{snow}$ g kg$^{-1}$', **axis_font)
#ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
#ax1.tick_params(axis='x', labelsize=labelfont)
#ax1.tick_params(axis='y', labelsize=labelfont)
#if any(qs) > 0: ax1.set_yscale('log')

#ax1 = plt.subplot(gs[7])
#P1 = ax1.plot(time,qr*1000.)
#plt.xlabel('Time (s)', **axis_font)
#plt.ylabel('q$_{rain}$ g kg$^{-1}$', **axis_font)
#ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
#if any(qr) > 0: ax1.set_yscale('log')
#ax1.tick_params(axis='x', labelsize=labelfont)
#ax1.tick_params(axis='y', labelsize=labelfont)

ax1 = plt.subplot(gs[5])
P1 = ax1.plot(time,ai*1.e6,color='blue',linewidth=1)
P2 = ax1.plot(time,ci*1.e6,color='blue',linestyle='dashed',linewidth=1)
P3 = ax1.plot(time,asn*1.e6,color='cyan',linewidth=1)
P4 = ax1.plot(time,csn*1.e6,color='cyan',linestyle='dashed',linewidth=1)
plt.xlabel('Time (s)', **axis_font)
plt.ylabel(r'axis length $\mu$m', **axis_font)
plt.legend(['ai','ci','as','cs'])
ax1.ticklabel_format(style='sci', scilimits=(-4,4), axis='y')
if any(ai) > 0: ax1.set_yscale('log')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)

ax1 = plt.subplot(gs[6])
P1 = ax1.plot(time,dep*1000.,color='blue',linewidth=1)
P2 = ax1.plot(time,abs(sub)*1000.,color='black',linewidth=1)
P3 = ax1.plot(time,nuc*1000.,color='green',linewidth=1)
#P3 = ax1.plot(time,agg*1000.,color='orange',linewidth=1)
plt.xlabel('Time (s)', **axis_font)
plt.ylabel('Ice Source', **axis_font)
plt.legend(['Dep','Sub','Nuc','Agg'])
ax1.ticklabel_format(style='sci', scilimits=(-4,4), axis='y')
if any(dep) > 0 or any(abs(sub)) > 0 or any(nuc) > 0: ax1.set_yscale('log')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)

ax1 = plt.subplot(gs[7])
P1 = ax1.plot(time,rhoice,color='blue',linewidth=1)
P2 = ax1.plot(time,rhos,color='cyan',linewidth=1)
plt.xlabel('Time (s)', **axis_font)
plt.ylabel(r'$\rho$  kg m$^{-3}$', **axis_font)
plt.legend(['ice','snow'])
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)

#ax1 = plt.subplot(gs[11])
#P1 = ax1.plot(time,ni*1000.)
#plt.xlabel('Time (s)', **axis_font)
#plt.ylabel('n$_{ice}$ L$^{-1}$', **axis_font)
#ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
#ax1.tick_params(axis='x', labelsize=labelfont)
#ax1.tick_params(axis='y', labelsize=labelfont)
#if any(ni) > 0: ax1.set_yscale('log')

ax1 = plt.subplot(gs[8])
P1 = ax1.plot(time,ni/1000.,color='blue',linewidth=1)
P2 = ax1.plot(time,ns/1000.,color='cyan',linewidth=1)
plt.xlabel('Time (s)', **axis_font)
plt.ylabel('n L$^{-1}$', **axis_font)
plt.legend(['i','s'])
ax1.ticklabel_format(style='sci', scilimits=(-3,3), axis='y')
ax1.tick_params(axis='x', labelsize=labelfont)
ax1.tick_params(axis='y', labelsize=labelfont)
if any(ns) > 0: ax1.set_yscale('log')

#ax1 = plt.subplot(gs[13])
#P1 = ax1.plot(time,asn*1.e6)
#P2 = ax1.plot(time,csn*1.e6)
#plt.xlabel('Time (s)', **axis_font)
#plt.ylabel(r'axis length $\mu$m', **axis_font)
#plt.legend(['as','cs'])
#ax1.ticklabel_format(style='sci', scilimits=(-4,4), axis='y')
#ax1.tick_params(axis='x', labelsize=labelfont)
#ax1.tick_params(axis='y', labelsize=labelfont)
#if any(asn) > 0: ax1.set_yscale('log')

plt.show()
fh.close()
